define(["dojo/_base/declare", "dojo/store/Memory", "dojo/dom-construct", "dojo/dom-class", "dojo/on", "dojo/_base/array", "dijit/_WidgetBase", "dijit/_TemplatedMixin", "dijit/_WidgetsInTemplateMixin", "dijit/_Container", "dijit/_Contained", "dijit/form/CheckBox", "dojo/dom-attr", "esri/tasks/QueryTask", "esri/tasks/query", "dojo/Stateful", "dojo/promise/all", "dojox/gfx", "esri/symbols/jsonUtils"], function (e, t, n, r, i, s, o, u, a, f, l, c, h, p, d, v, m, g, y) { var b = "Toggle layer display on map"; var w = "Zoom in to enable layer display controls"; var E = "<div><span class='TOCfeatSymbol' data-dojo-attach-point='symNode'></span> <span data-dojo-attach-point='labelNode' class='TOCswatchLabel'> ${!Label}</span></div>"; var S = "<div><input data-dojo-type='dijit/form/CheckBox' data-dojo-attach-point='toggleBox' name='layerBox' class='${BoxClass}' " + "title='${BoxTitle}' value=${BoxValue} /><span class='TOCfeatSymbol' data-dojo-attach-point='symNode'></span> <span data-dojo-attach-point='labelNode' class='TOClayerLabel'> ${!Name}</span></div>"; var x = "<div><img src='${ImgSrc}' class='TOCMultiSwatch' alt='${!Label}' /> <span data-dojo-attach-point='labelNode' class='TOCswatchLabel'> ${!Label}</span></div>"; var T = "<div><input data-dojo-type='dijit/form/CheckBox' data-dojo-attach-point='toggleBox' class='${BoxClass}' title='${BoxTitle}' value=${BoxValue} />" + "<img src='${ImgSrc}' data-dojo-attach-point='swatchNode' class='TOCswatch' alt='${!Name}' /> <span data-dojo-attach-point='labelNode' class='TOClayerLabel'> ${!Name}</span></div>"; var N = "<div><input data-dojo-type='dijit/form/CheckBox' data-dojo-attach-point='toggleBox' " + "class='${BoxClass}' title='${BoxTitle}' value=${BoxValue} /> <span data-dojo-attach-point='labelNode' class='TOClayerLabel'> ${!Name}</span></div>"; var C = "<div data-dojo-attach-point='parentItemNode'>" + "<span data-dojo-attach-point='iconNode' class='expandoIconTOC' data-dojo-attach-event='onclick: toggleGroup'></span>" + "<input data-dojo-type='dijit/form/CheckBox' data-dojo-attach-point='toggleBox' class='${BoxClass}' title='${BoxTitle}' value=${BoxValue} />" + "<span data-dojo-attach-point='labelNode' class='TOClayerLabel'> ${!Name}</span>" + "<div data-dojo-attach-point='containerNode' class='${NodeClass}'></div></div>"; var k = e([o, u, a, f, l, v], { templateString: S, widgetsInTemplate: true, baseClass: "TOCFeatureLyrNode", BoxTitle: b, constructor: function (t) { e.safeMixin(this, t); this.Toc = t.Toc; this.MapControl = this.Toc.MapControl; this.Visible = t.Item.defaultVisibility; this.Item = t.Item; this.Disabled = t.Disabled; this.Name = t.Item.name; this.Symbol = t.Symbol; this.BoxValue = t.Item.mapID; this.ShowToggleBox = t.Item.CanToggle; if (!this.ShowToggleBox) { this.BoxClass = "hideTOCBox" } else { this.BoxClass = "showTOCBox" } }, postCreate: function () { this.inherited(arguments); if (this.Disabled) { r.add(this.labelNode, "TOCItemDisabled") } if (this.ShowToggleBox) { if (this.Disabled) { this.toggleBox.set("title", w); this.toggleBox.set("disabled", "disabled") } if (this.Visible) { this.toggleBox.set("checked", "checked") } } if (this.Symbol.type === "picturemarkersymbol") { var e = this.Item.url + "/images/" + this.Symbol.imageData; n.create("img", { src: e }, this.symNode) } else { var t = g.createSurface(this.symNode, 40, 40); var i = y.getShapeDescriptors(this.Symbol); var s = t.createShape(i.defaultShape).setFill(i.fill).setStroke(i.stroke); s.applyTransform({ dx: 20, dy: 20 }) } } }); var L = e([o, u, l], { templateString: E, baseClass: "TOCSymbolNode", constructor: function (t) { e.safeMixin(this, t); this.Label = t.label; this.Symbol = t.Symbol; this.Item = t.Item }, postCreate: function () { this.inherited(arguments); if (this.Symbol.type === "picturemarkersymbol") { var e = this.Item.url + "/images/" + this.Symbol.imageData; n.create("img", { src: e }, this.symNode) } else { var t = g.createSurface(this.symNode, 40, 40); var r = y.getShapeDescriptors(this.Symbol); var i = t.createShape(r.defaultShape).setFill(r.fill).setStroke(r.stroke); i.applyTransform({ dx: 20, dy: 20 }) } } }); var A = e([o, u, a, f, l, v], { templateString: C, widgetsInTemplate: true, baseClass: "TOCGroupNode", BoxTitle: b, NodeClass: "TOCsubLayerList", constructor: function (t) { e.safeMixin(this, t); this.Toc = t.Toc; this.MapControl = this.Toc.MapControl; this.GroupVis = t.Item.defaultVisibility; this.Item = t.Item; this.Name = t.Item.name; this.ShowToggleBox = t.Item.CanToggle; this.Disabled = t.Disabled; this.BoxValue = t.Item.id; if (this.ShowToggleBox) { this.BoxClass = "showTOCBox" } else { this.BoxClass = "hideTOCBox" } this.isExpanded = this.Item.isExpanded; this.expand = this.Item.expand }, toggleGroup: function () { var e = this; if (e.isExpanded) { r.replace(e.iconNode, "TOCparentRow-collapsed", "TOCparentRow-expanded"); r.add(e.containerNode, "hideTOCItem") } else { r.replace(e.iconNode, "TOCparentRow-expanded", "TOCparentRow-collapsed"); r.remove(e.containerNode, "hideTOCItem") } e.set("isExpanded", !e.isExpanded) }, postCreate: function () { this.inherited(arguments); if (this.Disabled) { r.add(this.labelNode, "TOCItemDisabled") } if (this.ShowToggleBox) { if (this.Disabled) { this.toggleBox.set("title", w); this.toggleBox.set("disabled", "disabled") } if (this.GroupVis) { this.toggleBox.set("checked", "checked") } } if (this.expand) { var e; if (this.isExpanded) { e = "TOCparentRow-expanded" } else { e = "TOCparentRow-collapsed"; r.add(this.containerNode, "hideTOCItem") } r.add(this.iconNode, e) } } }); var O = e([o, u, a, f, l, v], { templateString: C, widgetsInTemplate: true, baseClass: "TOCsymbolParentNode", BoxTitle: b, NodeClass: "TOCsymbolList", constructor: function (t) { e.safeMixin(this, t); this.Toc = t.Toc; this.MapControl = this.Toc.MapControl; this.Visible = t.Item.defaultVisibility; this.Disabled = t.Disabled; this.Item = t.Item; this.Name = t.Item.name; this.ShowToggleBox = t.Item.CanToggle; this.BoxValue = t.Item.id; if (!this.ShowToggleBox) { this.BoxClass = "hideTOCBox" } else { this.BoxClass = "showTOCBox" } this.isExpanded = this.Item.isExpanded; this.expand = this.Item.expand }, toggleGroup: function () { var e = this; if (e.isExpanded) { r.replace(e.iconNode, "TOCparentRow-collapsed", "TOCparentRow-expanded"); r.add(e.containerNode, "hideTOCItem") } else { r.replace(e.iconNode, "TOCparentRow-expanded", "TOCparentRow-collapsed"); r.remove(e.containerNode, "hideTOCItem") } e.set("isExpanded", !e.isExpanded) }, postCreate: function () { this.inherited(arguments); if (this.Disabled) { r.add(this.labelNode, "TOCItemDisabled") } if (this.ShowToggleBox) { if (this.Disabled) { this.toggleBox.set("title", w); this.toggleBox.set("disabled", "disabled") } if (this.Visible) { this.toggleBox.set("checked", "checked") } } if (this.expand) { var e; if (this.isExpanded) { e = "TOCparentRow-expanded" } else { e = "TOCparentRow-collapsed"; r.add(this.containerNode, "hideTOCItem") } r.add(this.iconNode, e) } } }); var M = e([o, u, a, f, l, v], { templateString: T, widgetsInTemplate: true, baseClass: "TOCFeatureNode", BoxTitle: b, constructor: function (t) { e.safeMixin(this, t); this.Toc = t.Toc; this.MapControl = this.Toc.MapControl; this.Visible = t.Item.defaultVisibility; this.Disabled = t.Disabled; this.Item = t.Item; this.Name = t.Item.name; var n = t.Symbol; var r = this.Toc.MapServiceURL + "/" + t.Item.id + "/images/" + n; this.ImgSrc = r; this.BoxValue = t.Item.id; this.ShowToggleBox = t.Item.CanToggle; if (!this.ShowToggleBox) { this.BoxClass = "hideTOCBox" } else { this.BoxClass = "showTOCBox" } }, postCreate: function () { this.inherited(arguments); if (this.Disabled) { r.add(this.labelNode, "TOCItemDisabled") } if (this.ShowToggleBox) { if (this.Disabled) { this.toggleBox.set("title", w); this.toggleBox.set("disabled", "disabled") } if (this.Visible) { this.toggleBox.set("checked", "checked") } } else { r.add(this.swatchNode, "noSwatch") } } }); var _ = e([o, u, l], { templateString: x, baseClass: "TOCSymbolNode", constructor: function (t) { e.safeMixin(this, t); this.ImgSrc = t.ImgSrc; this.Label = t.label }, postCreate: function () { this.inherited(arguments) } }); var D = e([o, u, a, f, l, v], { templateString: N, widgetsInTemplate: true, baseClass: "TOCLabelNode", BoxTitle: b, constructor: function (t) { e.safeMixin(this, t); this.Toc = t.Toc; this.MapControl = this.Toc.MapControl; this.Visible = t.Item.defaultVisibility; this.Item = t.Item; this.Name = t.Item.name; this.BoxValue = t.Item.id; this.ShowToggleBox = t.Item.CanToggle; this.Disabled = t.Disabled; if (!this.ShowToggleBox) { this.BoxClass = "hideTOCBox" } else { this.BoxClass = "showTOCBox" } }, postCreate: function () { this.inherited(arguments); if (this.Disabled) { r.add(this.labelNode, "TOCItemDisabled") } if (this.ShowToggleBox) { if (this.Disabled) { this.toggleBox.set("title", w); this.toggleBox.set("disabled", "disabled") } if (this.Visible) { this.toggleBox.set("checked", "checked") } } } }); var P = e([o, u, a, f, l, v], { templateString: N, widgetsInTemplate: true, baseClass: "TOCLabelNode", BoxTitle: b, constructor: function (t) { e.safeMixin(this, t); this.Toc = t.Toc; this.MapControl = this.Toc.MapControl; this.Visible = t.Item.defaultVisibility; this.Item = t.Item; this.Name = t.Item.name; this.BoxValue = t.Item.id; this.ShowToggleBox = t.Item.CanToggle; this.Disabled = t.Disabled; if (!this.ShowToggleBox) { this.BoxClass = "hideTOCBox" } else { this.BoxClass = "showTOCBox" } }, postCreate: function () { this.inherited(arguments); if (this.Disabled) { r.add(this.labelNode, "TOCItemDisabled") } if (this.ShowToggleBox) { if (this.Disabled) { this.toggleBox.set("title", w); this.toggleBox.set("disabled", "disabled") } if (this.Visible) { this.toggleBox.set("checked", "checked") } r.replace(this.labelNode, "TOCcbLabel", "TOClayerLabel"); this.toggleBox.set("style", "margin-left: 20px;") } else { r.replace(this.labelNode, "TOCsubLabel", "TOClayerLabel") } } }); return e([o, f, v], { loaded: false, HideLayersList: null, ShowAllLayers: true, LayersToToggle: null, FeatureService: false, MapService: null, FeatureLayers: null, Title: null, ShowCheckBoxes: true, ToggleAll: true, constructor: function (n) { e.safeMixin(this, n); this.MapControl = n.MapControl; this.MapService = n.MapService; if (n.FeatureService) { this.FeatureService = true; if (!n.FeatureLayers) { this._throwError("FeatureLayers array required") } else { this.FeatureLayers = n.FeatureLayers } } else { if (!n.MapService) { this._throwError("MapService required") } else { this.MapServiceURL = n.MapService.url } } if (n.Title) { this.Title = n.Title } if (n.HideLayersList) { this.ShowAllLayers = false; this.HideLayersList = n.HideLayersList } if (n.ShowCheckBoxes !== "undefined") { this.ShowCheckBoxes = n.ShowCheckBoxes; if (n.ToggleAll === false) { this.ToggleAll = n.ToggleAll; this.LayersToToggle = n.LayersToToggle } } if (!n.Expand) { this._throwError("Expand setting is required") } else { this.ExpandOption = n.Expand.options; this.ExpandIDs = n.Expand.expandLayers } if (n.className) { this.className = n.className } this.LegendStore = new t({ idProperty: "layerId" }); this.LayerStore = new t({ idProperty: "id" }); this.GroupLayerIds = []; this.Nodes = {} }, _queryAllLayers: function () { var e = this, t = e.MapServiceURL + "/layers?f=json"; var n = new p(t); var r = new d; r.returnGeometry = false; r.where = "id > 0"; var i = n.execute(r); return i.promise }, _queryLegendLayers: function () { var e = this, t = e.MapServiceURL + "/legend?f=json"; var n = new p(t); var r = new d; r.returnGeometry = false; r.where = "layerId > 0"; var i = n.execute(r); return i.promise }, _loadLegend: function (e, t) { var n = s.filter(e[1].layers, function (e) { var n = s.some(t.HideLayersList, function (t) { return t === e.layerId }); if (t.ShowAllLayers || !n) { return e } }); t.LegendStore.setData(n); t._loadLayers(e[0], t) }, _showChildren: function (e, t) { var n = false; if (s.every(e, function (e) { return s.indexOf(t.HideLayersList, e.id) >= 0 })) { n = false } else { n = true } return n }, _loadLayers: function (e, t) { if (e.length === 0) { t._throwError("The service query failed. Please check your map service settings.") } var n = false; if (t.ExpandOption === "all") { n = true } if (t.ShowCheckBoxes && !t.ToggleAll && !t.LayersToToggle) { t._throwError("LayersToToggle setting is required") } var r = s.map(e.layers, function (e) { var n = false; if (!t.ShowAllLayers) { n = s.some(t.HideLayersList, function (t) { return t === e.id }) } if (!n) { e.ShowNode = true; return e } else if (n) { e.ShowNode = false; return e } }); t.LayerStore.setData(r); t.LayerStore.query({ ShowNode: true }).forEach(function (e) { e.isChild = false; if (e.type === "Group Layer" || e.subLayers.length > 0) { t.GroupLayerIds.push(e.id); e.hasChildren = true; if (!t.ShowAllLayers) { var r = t._showChildren(e.subLayers, t); if (r) { e.showChildren = true; e.expand = true } else { e.showChildren = false; e.expand = false } } else { e.expand = true; e.showChildren = true } if (!e.parentLayer) { e.parent = null; e.isChild = false } else { e.parent = e.parentLayer.id; e.isChild = true } } if (e.parentLayer) { e.parent = e.parentLayer.id; e.isChild = true } if (e.type === "Feature Layer" && e.drawingInfo && e.drawingInfo.renderer.type !== "simple") { e.hasSymbolChildren = true; e.hasChildren = false; e.expand = true } if (n || s.indexOf(t.ExpandIDs, e.id) > -1) { e.isExpanded = true } else { e.isExpanded = false } if (t.ToggleAll || s.indexOf(t.LayersToToggle, e.id) > -1) { e.CanToggle = true } t.LayerStore.put(e) }); var i = t.LayerStore.query({ isChild: false }); t._loadItems(t, i) }, _loadFeatureLayers: function (e) { var t = this, n = []; if (e.length === 0) { t._throwError("No Feature Layers were loaded. Please check your settings.") } if (t.ShowCheckBoxes && !t.ToggleAll && !t.LayersToToggle) { t._throwError("LayersToToggle setting is required") } if (t.ExpandOption === "all") { expandAll = true } else { expandAll = false } s.forEach(e, function (e) { var t = { minScale: e.minScale, maxScale: e.maxScale, defaultVisibility: e.visible, name: e.name, mapID: e.id, id: e.layerId, url: e.url }; if (e.renderer.symbol) { t.symbol = e.renderer.symbol } else { t.symbol = e.renderer.infos } n.push(t) }); t.LayerStore.setData(n); t.LayerStore.query().forEach(function (e) { var n = false, r = t._getLayerVis(e); if (e.minScale > 0 || e.maxScale > 0) { n = true } if (t.ToggleAll || s.indexOf(t.LayersToToggle, e.id) > -1) { e.CanToggle = true } if (e.symbol.length > 1) { e.hasSymbolChildren = true; e.hasChildren = false; e.expand = true; if (expandAll || s.indexOf(t.ExpandIDs, e.id) > -1) { e.isExpanded = true } else { e.isExpanded = false } var i = new O({ Item: e, Toc: t, Disabled: !r, DisplayScale: n, className: "parent-row" }); t.addChild(i); if (e.CanToggle) { i.toggleBox.on("click", t._toggleFeatureLayer) } i.watch("Disabled", t._itemState); s.forEach(e.symbol, function (t) { var n = new L({ Label: t.label, Symbol: t.symbol, Item: e }); i.addChild(n) }); t.LayerStore.put(e) } else { var o = new k({ Item: e, Toc: t, Disabled: !r, DisplayScale: n, Symbol: e.symbol }); t.addChild(o); if (e.CanToggle) { o.toggleBox.on("click", t._toggleFeatureLayer) } o.watch("Disabled", t._itemState) } }); i(t.MapControl, "zoom-end", function () { t._onMapZoom(t) }); t.set("loaded", true) }, _loadChildren: function (e, t) { var n = this; s.forEach(t, function (t) { var r = n._getLayerVis(t); var i = n.MapService.visibleAtMapScale, o = n.MapService.visible, u = false, a = true; if (r && i && o && !e.Disabled) { a = false } if (t.minScale > 0 || t.maxScale > 0) { u = true } if (t.type === "Feature Layer" || t.type === "Raster Layer") { var f = n.LegendStore.get(t.id); if (t.hasSymbolChildren) { var l = new O({ Item: t, Toc: n, Disabled: a, DisplayScale: u }); e.addChild(l); if (t.CanToggle) { l.toggleBox.on("click", n._toggleLayer) } l.watch("Disabled", n._itemState); if (t.expand) { var c = n.MapServiceURL + "/"; s.forEach(f.legend, function (e) { var n = c + t.id + "/images/" + e.url; var r = new _({ Label: e.label, ImgSrc: n }); l.addChild(r) }) } n.Nodes[t.name] = l } else { var h = new M({ Item: t, Toc: n, Disabled: a, DisplayScale: u, Symbol: f.legend[0].url }); e.addChild(h); if (t.CanToggle) { h.toggleBox.on("click", n._toggleLayer) } h.watch("Disabled", n._itemState); n.Nodes[t.name] = h } } else if (t.type === "Group Layer") { var p = new A({ Item: t, Toc: n, Disabled: a, DisplayScale: u }); e.addChild(p); if (t.showChildren) { var d = n.LayerStore.query({ parent: t.id }); if (t.expand) { n._loadChildren(p, d) } if (t.CanToggle) { p.toggleBox.on("click", n._toggleGroupLayer) } } p.watch("Disabled", n._itemState); n.Nodes[t.name] = p } else if (t.type === "Annotation Layer") { var v = new P({ Item: t, Disabled: a, DisplayScale: u, Toc: n }); e.addChild(v); if (t.CanToggle) { v.toggleBox.on("click", n._toggleLayer) } v.watch("Disabled", n._itemState); n.Nodes[t.name] = v } }); if (!e.isExpanded) { r.add(e.containerNode, "hideTOCItem;") } }, _loadItems: function (e, t) { var n = e.MapServiceURL + "/"; s.forEach(t, function (t) { var n = e._getLayerVis(t); var r = e.MapService.visibleAtMapScale, i = e.MapService.visible, o = false, u = true; if (n && r && i) { u = false } if (t.minScale > 0 || t.maxScale > 0) { o = true } if (t.type === "Group Layer") { var a = new A({ Item: t, Toc: e, Disabled: u, DisplayScale: o }); e.addChild(a); if (t.showChildren && t.expand) { var f = e.LayerStore.query({ parent: t.id }); e._loadChildren(a, f) } if (t.CanToggle) { a.toggleBox.on("click", e._toggleGroupLayer) } a.watch("Disabled", e._itemState); e.Nodes[t.name] = a } else if (t.type === "Feature Layer" || t.type === "Raster Layer") { var l = e.LegendStore.get(t.id); if (t.hasSymbolChildren) { var c = new O({ Item: t, Toc: e, Disabled: u, DisplayScale: o }); e.addChild(c); if (t.CanToggle) { c.toggleBox.on("click", e._toggleLayer) } c.watch("Disabled", e._itemState); var h = e.MapServiceURL + "/"; s.forEach(l.legend, function (e) { var n = h + t.id + "/images/" + e.url; var r = new _({ Label: e.label, ImgSrc: n }); c.addChild(r) }); e.Nodes[t.name] = c } else { var p = new M({ Item: t, Toc: e, Disabled: u, DisplayScale: o, Symbol: l.legend[0].url }); e.addChild(p); if (t.CanToggle) { p.toggleBox.on("click", e._toggleLayer) } p.watch("Disabled", e._itemState); e.Nodes[t.name] = p } } else if (t.type === "Annotation Layer") { var d = new D({ Item: t, Toc: e, Disabled: u, DisplayScale: o }); e.addChild(d); if (t.CanToggle) { if (t.subLayers[0]) { d.toggleBox.on("click", e._toggleGroupLayer) } else { d.toggleBox.on("click", e._toggleLayer) } } d.watch("Disabled", e._itemState); e.Nodes[t.name] = d } }); i(e.MapControl, "zoom-end", function () { e._onMapZoom(e) }); e.MapService.on("visibility-change", function (t) { e._onSvcVisibilityChange(e, t) }); e.set("loaded", true) }, _onSvcVisibilityChange: function (e, t) { s.forEach(Object.keys(e.Nodes), function (n) { var r = e.Nodes[n]; var i = e._getLayerVis(r.Item); if (t.visible && r.Disabled && i) { r.set("Disabled", false) } else if (!t.visible && !r.Disabled) { r.set("Disabled", true) } }) }, _itemState: function (e, t, n) { var i = this.Toc; if (!n) { r.remove(this.labelNode, "TOCItemDisabled"); if (this.Item.CanToggle) { this.toggleBox.set("disabled", false); this.toggleBox.set("title", b) } } else { r.add(this.labelNode, "TOCItemDisabled"); if (this.Item.CanToggle) { this.toggleBox.set("disabled", "disabled"); this.toggleBox.set("title", w) } } }, _onMapZoom: function (e) { if (e.FeatureService) { s.forEach(e.getChildren(), function (t) { var n = e.MapControl.getLayer(t.Item.mapID); var r = n.visibleAtMapScale; if (!r && !t.Disabled) { t.set("Disabled", true) } else if (r && t.Disabled) { t.set("Disabled", false) } }) } else { var t = e.MapService.visibleAtMapScale, n = e.MapService.visible; s.forEach(e.getChildren(), function (r) { if (r.Item) { if ((!n || !t) && !r.Disabled) { r.set("Disabled", true) } else if (n && t && !r.DisplayScale && r.Disabled) { r.set("Disabled", false) } else if (n && t && r.DisplayScale) { var i = e._getLayerVis(r.Item); if (i && r.Disabled) { r.set("Disabled", false) } else if (!i && !r.Disabled) { r.set("Disabled", true) } } if (r.Item.hasChildren && r.Disabled) { s.forEach(r.getChildren(), function (e) { e.set("Disabled", true); if (e.Item.hasChildren) { s.forEach(e.getChildren(), function (e) { e.set("Disabled", true) }) } }) } else if (r.Item.hasChildren && !r.Disabled) { s.forEach(r.getChildren(), function (r) { if (n && t && !r.DisplayScale && r.Disabled) { r.set("Disabled", false) } else if (n && t && r.DisplayScale) { var i = e._getLayerVis(r.Item); if (i && r.Disabled) { r.set("Disabled", false) } else if (!i && !r.Disabled) { r.set("Disabled", true) } } if (r.Item && r.Item.hasChildren) { s.forEach(r.getChildren(), function (r) { if (n && t && !r.DisplayScale && r.Disabled) { r.set("Disabled", false) } else if (n && t && r.DisplayScale) { var i = e._getLayerVis(r.Item); if (i && r.Disabled) { r.set("Disabled", false) } else if (!i && !r.Disabled) { r.set("Disabled", true) } } }) } }) } } }) } }, _handleGroupLayerVis: function (e, t) { var n = e.LayerStore.query({ hasChildren: true }); s.forEach(n, function (n) { var r = s.indexOf(t, n.id); if (r >= 0) { t.splice(r, 1) } var i = e.Nodes[n.name]; if (!i.GroupVis) { s.forEach(n.subLayers, function (n) { var r = s.indexOf(t, n.id); if (r >= 0) { t.splice(r, 1) } var i = e.LayerStore.get(n.id).subLayers; if (i.length > 0) { s.forEach(i, function (e) { var n = s.indexOf(t, e.id); if (n >= 0) { t.splice(n, 1) } }) } }) } }); return t }, _toggleLayer: function (e) { var t = this.getParent(), n = t.Toc; var r = t.Item.id, i = n.MapService.visibleLayers; if (i[0] === -1) { i = [] } if (this.checked || this.checked === "checked") { t.set("Visible", true); if (s.indexOf(i, r) === -1) { if (t.Item.isChild) { var o = n.LayerStore.get(t.Item.parent); var u = n.Nodes[o.name]; if (u.GroupVis && !u.Item.isChild) { i.push(r) } else if (u.GroupVis && u.Item.isChild) { var a = n.LayerStore.get(u.Item.parent); var f = n.Nodes[a.name]; if (f.GroupVis) { i.push(r) } } } else { i.push(r) } if (i.length === 0) { i.push(-1) } n.MapService.setVisibleLayers(i) } } else { t.set("Visible", false); var l = s.indexOf(i, r); if (l >= 0) { i.splice(l, 1) } i = n._handleGroupLayerVis(n, i); if (i.length === 0) { i.push(-1) } n.MapService.setVisibleLayers(i) } }, _toggleGroupLayer: function (e) { var t = this.getParent(); var n = t.Toc, r = n.MapService.visibleLayers, i = t.Item.id; if (this.checked || this.checked === "checked") { if (r[0] === -1) { r = [] } t.set("GroupVis", true); var o = s.indexOf(r, i); if (o >= 0) { r.splice(o, 1) } var u = false; if (t.Item.isChild) { var a = n.LayerStore.get(t.Item.parent); var f = n.Nodes[a.name]; if (f.GroupVis && !f.Item.isChild) { u = true } } else { u = true } if (u) { s.forEach(t.Item.subLayers, function (e) { var t, i = n.Nodes[e.name]; var o = s.indexOf(r, e.id); if (i && !i.Item.hasChildren) { t = i.Visible } else if (!i) { var t = n.LayerStore.get(e.id).defaultVisibility } if (t && o < 0) { r.push(e.id) } var u = n.LayerStore.get(e.id).subLayers; if (u) { s.forEach(u, function (e) { var t, i = n.Nodes[e.name]; var o = s.indexOf(r, e.id); if (i) { t = i.Visible } else { t = n.LayerStore.get(e.id).defaultVisibility } if (t && o < 0) { r.push(e.id) } }) } }) } if (r.length === 0) { r.push(-1) } n.MapService.setVisibleLayers(r) } else { t.set("GroupVis", false); r = n._handleGroupLayerVis(n, r); if (r.length === 0) { r.push(-1) } n.MapService.setVisibleLayers(r) } }, _toggleFeatureLayer: function (e) { var t = this.getParent(), n = t.MapControl; var r = t.Item.mapID; if (this.checked || this.checked === "checked") { n.getLayer(r).show() } else { n.getLayer(r).hide() } }, _getLayerVis: function (e) { var t = this.MapControl; var n = t.getScale(), r = true; if (e.maxScale > 0 && n < e.maxScale || e.minScale > 0 && n > e.minScale) { r = false } return r }, _throwError: function (e) { console.log(e); alert("TOC Legend Error: " + e); return }, postCreate: function () { var e = this; if (!e.MapControl) { e._throwError("MapControl required") } if (e.FeatureService) { e._loadFeatureLayers(e.FeatureLayers) } else if (e.MapService) { m([e._queryAllLayers(), e._queryLegendLayers()]).then(function (t) { e._loadLegend(t, e) }) } else { e._throwError("There was a problem loading the TOC Legend. \nPlease check your settings and try again.") } r.add(e.containerNode, e.className); if (e.Title) { n.create("h2", { innerHTML: e.Title, className: "TocTitle" }, e.domNode, 0) } } }) })